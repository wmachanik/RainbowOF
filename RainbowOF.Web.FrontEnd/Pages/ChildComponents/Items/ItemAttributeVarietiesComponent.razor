@*
    -------------------------------------------------------------
    Component to view AttributeVarieties in a grid for an item
    Parameters:
   > PopUpAndLogNotification PopUpRef to display the results of the add
   > List<ItemAttributeVariety> SourceItemAttributeVarieties
    Uses:
    IAppUnitOfWork AppUnitOfWork
    -------------------------------------------------------------
*@
@using RainbowOF.Models.Items
@using RainbowOF.Models.Lookups

@if (itemAttributeVarietyGridRepository == null)
{
    <Badge Color="Color.Primary" Pill="true">loading...</Badge>
}
@*else if ((ModelItemAttributeVarieties == null) || (ModelItemAttributeVarieties.Count == 0))
    {
    <Badge Color="Color.Primary" Pill="true">Item has no AttributeVarieties</Badge>
    }
*@
else
{
    if ((modelItemAttributeVarieties == null) || ( ((modelItemAttributeVarieties != null) && (modelItemAttributeVarieties.Count == 0))))
    {
        <Badge Color="Color.Primary" Pill="true">Item has no Attribute Varieties. To add one use the plus button</Badge>
    }
    <DataGrid @ref="currDataGrid"
          TItem="ItemAttributeVariety" Data="@modelItemAttributeVarieties"
          Sortable="true" Editable="true"
          Striped="true"
          Hoverable="true"
          Responsive="true"
          EditMode="DataGridEditMode.Popup"
          TotalItems="modelItemAttributeVarieties.Count"
          PageSize="25"
          @bind-SelectedRow="@seletectedItemAttributeVariety"
          Bordered="true"
          Narrow="true"
          Filterable="@itemAttributeVarietyGridRepository.CurrGridSettings.IsFilterable"
          UseInternalEditing="true"
          NewItemDefaultSetter="@OnNewItemAttributeVarietyDefaultSetter"
          RowInserted="@OnRowInsertingAsync"
          RowUpdated="@OnRowUpdatedAsync"
          RowRemoving="@OnRowRemovingAsync"
          RowRemoved="@OnRowRemovedAsync"
          UseValidation="true"
          ShowValidationsSummary="true"
          ValidationsSummaryLabel="Error validating data. Following error occurs..."
          ShowValidationFeedback="true"
          Padding="Padding.Is0">
        <EmptyTemplate>
            @if (modelItemAttributeVarieties == null)
            {
                <span>Loading...</span>
            }
        </EmptyTemplate>
        <LoadingTemplate>
            <Row Style="display: inline-flex;" Padding="Padding.IsAuto">
                <Column>
                    <span class="alert-info">Loading...</span>
                </Column>
            </Row>
        </LoadingTemplate>
        <DataGridColumns>
            <DataGridColumn TItem="ItemAttributeVariety" Field="@nameof(ItemAttributeVariety.ItemAttributeVarietyLookupId)"
                        TextAlignment="TextAlignment.Start" Context="itemAttributeVarietyData" Caption="Attribute Variety" Editable="true" Sortable="true">
                <DisplayTemplate>
                    @{
                        var _itemAttributeVariety = (itemAttributeVarietyData as ItemAttributeVariety);
                        <span>
                        @((_itemAttributeVariety != null) && (_itemAttributeVariety.ItemAttributeVarietyDetail != null)
                            ? _itemAttributeVariety.ItemAttributeVarietyDetail.VarietyName 
                            : "n/a")
                        </span>
                        //if ((_itemAttributeVariety != null) && (_itemAttributeVariety.ItemAttributeVarietyDetail != null))
                        //{
                        //    //string _Display = $"{_itemAttributeVariety.ItemAttributeVarietyLookupId}: {_itemAttributeVariety.ItemAttributeVarietyDetail.VarietyName}";
                        //    //@_Display
                        //}
                        //else
                        //{
                        //    <span>n/a</span>
                        //}
                    }
                </DisplayTemplate>
                <EditTemplate>
                    @{
                        var _itemAttributeVariety = (itemAttributeVarietyData.Item as ItemAttributeVariety);
                        List<ItemAttributeVarietyLookup> _AttributeVarieties = GetListOfAttributeAvailableVarieties(SourceItemAttribute.ItemAttributeLookupId, _itemAttributeVariety.ItemAttributeVarietyLookupId);
                        @*---- Should to remove the AttributeVarieties that are in the database for insert ----*@
                        <Select TValue="Guid" SelectedValue="@((Guid)itemAttributeVarietyData.CellValue)" SelectedValueChanged="@((v) => itemAttributeVarietyData.CellValue = v)">
                            <SelectItem TValue="Guid" Value="Guid.Empty">--- Select a variety ---</SelectItem>
                            @foreach (var item in _AttributeVarieties)
                            {
                                <SelectItem TValue="Guid" Value="@item.ItemAttributeVarietyLookupId">@item.VarietyName</SelectItem>
                            }
                        </Select>
                    }
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ItemAttributeVariety" Field="@nameof(ItemAttributeVariety.IsDefault)" TextAlignment="TextAlignment.Start"
                        Context="itemAttributeVarietyData" Caption="Is Default Attribute" Editable="true">
                <EditTemplate>
                    <Tooltip Text="Is this the default attribute" Style="z-index:99" Placement="TooltipPlacement.Bottom">
                        <Check TValue="bool" Checked="@((bool)itemAttributeVarietyData.CellValue)" CheckedChanged="@((v) => itemAttributeVarietyData.CellValue = v)">
                            <ChildContent>
                                Yes?
                            </ChildContent>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </Check>
                    </Tooltip>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ItemAttributeVariety" Field="ItemAttributeVarietyDetail.UoM.UoMSymbol" TextAlignment="TextAlignment.Center"
                        Context="itemAttributeVarietyData" Caption="UoM" Editable="false">
                <DisplayTemplate>
                    @{
                        var _itemAttributeVariety = (itemAttributeVarietyData as ItemAttributeVariety);
                         @(((_itemAttributeVariety != null)
                            && (_itemAttributeVariety.ItemAttributeVarietyDetail != null) 
                            && (_itemAttributeVariety.ItemAttributeVarietyDetail.UoM != null)) 
                                ? @_itemAttributeVariety.ItemAttributeVarietyDetail.UoM.UoMSymbol : @"n/a");
                      }
                </DisplayTemplate>
                <EditTemplate>
                    <Tooltip Text="Unit of measure for this attribute" Style="z-index:99" Placement="TooltipPlacement.Bottom">
                        @{
                            var _itemAttributeVariety = (itemAttributeVarietyData.Item as ItemAttributeVariety);
                            @(((_itemAttributeVariety != null)
                            && (_itemAttributeVariety.ItemAttributeVarietyDetail != null) 
                            && (_itemAttributeVariety.ItemAttributeVarietyDetail.UoM != null)) 
                                ? @_itemAttributeVariety.ItemAttributeVarietyDetail.UoM.UoMSymbol : @"n/a");
                        }
                    </Tooltip>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="ItemAttributeVariety" Field="ItemAttributeVarietyDetail.UoMQtyPerItem"
                               Context="itemAttributeVarietyData" Caption="Qty / UoM" Editable="false">
                <DisplayTemplate>
                    @{
                        var _itemAttributeVariety = (itemAttributeVarietyData as ItemAttributeVariety);
                         @(((_itemAttributeVariety != null)
                            && (_itemAttributeVariety.ItemAttributeVarietyDetail != null) 
                            && (_itemAttributeVariety.ItemAttributeVarietyDetail.UoM != null)) 
                                ? @_itemAttributeVariety.ItemAttributeVarietyDetail.UoMQtyPerItem : @"n/a");
                    }
                </DisplayTemplate>
                <EditTemplate>
                    <Tooltip Text="Used for predictive calculations, needs a Unit of measure this is the quantity multiple relative to the base UoM" Style="z-index:99" Placement="TooltipPlacement.TopStart">
                        @{
                            var _itemAttributeVariety = (itemAttributeVarietyData.Item as ItemAttributeVariety);
                            @(((_itemAttributeVariety != null)
                              && (_itemAttributeVariety.ItemAttributeVarietyDetail != null) 
                              && (_itemAttributeVariety.ItemAttributeVarietyDetail.UoM != null)) 
                                  ? @_itemAttributeVariety.ItemAttributeVarietyDetail.UoMQtyPerItem : @"n/a");
                        }
                    </Tooltip>
                </EditTemplate>
            </DataGridColumn>
            <DataGridCommandColumn TItem="ItemAttributeVariety" Width="6.5em">
                <NewCommandTemplate>
                    <Tooltip Text="New Item AttributeVariety" Style="z-index:99" Placement="TooltipPlacement.Bottom">
                        <Button Color="Color.Success" Clicked="@context.Clicked">
                            <Icon Name="IconName.Add" />
                        </Button>
                    </Tooltip>
                    <Tooltip Text="Filter by Column" Style="z-index:99" Placement="TooltipPlacement.Left">
                        <Button Color="Color.Info" Clicked="@(()=>itemAttributeVarietyGridRepository.CurrGridSettings.IsFilterable= !itemAttributeVarietyGridRepository.CurrGridSettings.IsFilterable)">
                            <Icon Name="@((itemAttributeVarietyGridRepository.CurrGridSettings.IsFilterable) ? IconName.MinusCircle : IconName.Filter)" />
                        </Button>
                    </Tooltip>
                </NewCommandTemplate>
                <EditCommandTemplate>
                    <Tooltip Text="Edit AttributeVariety">
                        <Button Color="Color.Primary" Clicked="@context.Clicked">
                            <Icon Name="IconName.Edit" />
                        </Button>
                    </Tooltip>
                </EditCommandTemplate>
                <DeleteCommandTemplate>
                    <Tooltip Text="Delete AttributeVariety">
                        <Button Color="Color.Danger" Clicked="@context.Clicked">
                            <Icon Name="IconName.Delete" />
                        </Button>
                    </Tooltip>
                </DeleteCommandTemplate>
                <SaveCommandTemplate>
                    <Tooltip Text="Save">
                        <Button Color="Color.Primary" Clicked="@context.Clicked">
                            <Icon Name="IconName.CheckCircle" />
                        </Button>
                    </Tooltip>
                </SaveCommandTemplate>
                <CancelCommandTemplate>
                    <Tooltip Text="Undo changes">
                        <Button Color="Color.Secondary" Clicked="@context.Clicked">
                            <Icon Name="IconName.Undo" />
                        </Button>
                    </Tooltip>
                </CancelCommandTemplate>
                <ClearFilterCommandTemplate>
                    <Tooltip Text="Clear Filter" Style="z-index:99" Placement="TooltipPlacement.Left">
                        <Button Color="Color.Info" Outline="true" Clicked="@context.Clicked">
                            <Icon Name="IconName.Clear" />
                        </Button>
                    </Tooltip>
                </ClearFilterCommandTemplate>
            </DataGridCommandColumn>
        </DataGridColumns>
    </DataGrid>

    <RainbowOF.Components.Modals.ConfirmModal @ref="itemAttributeVarietyGridRepository.CurrGridSettings.DeleteConfirmation"
                                          ConfirmationClicked="ConfirmDelete_ClickAsync"
                                          ConfirmationMessage=@($"Are you sure you want to delete ?")
                                          ConfirmButtonText="Delete"
                                          CancelButtonText="Cancel" />

}
