@*
    -------------------------------------------------------------
    Component to add a new Attribute Variety

    Parameters:
       > PopUpAndLogNotification PopUpRef to display the results of the add
       > bool AddItemToWoo optional default is false;
    Uses:
        IAppUnitOfWork AppUnitOfWork
    -------------------------------------------------------------
*@
<Modal @ref="newAttributeVarietyLookupModalRef">
    <ModalContent Size="Blazorise.ModalSize.Default" Centered="true">
        <ModalHeader>
            <ModalTitle>
                <Icon Name="IconName.Add" />
                Add Attribute Variety
            </ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Variety Name</FieldLabel>
                <TextEdit Autofocus="true" Text="@newItemAttributeVarietyLookupView.VarietyName" TextChanged="((vn) => newItemAttributeVarietyLookupView.VarietyName = vn)" Placeholder="Enter variety name..." />
            </Field>
            <Field>
                <FieldLabel>UoM</FieldLabel>
                <UoMLookupSelectListComponent PopUpRef="PopUpRef" SourceUoMId="newItemAttributeVarietyLookupView.UoMId" UoMIdChangedEvent="@((u) => newItemAttributeVarietyLookupView.UoMId = u)"></UoMLookupSelectListComponent>
            </Field>
            <Field>
                <FieldLabel>Sort Order</FieldLabel>
                <TextEdit TextChanged="((sv) => newItemAttributeVarietyLookupView.SortOrder = Convert.ToInt32(sv))" InputMode="TextInputMode.Numeric" Text="@newItemAttributeVarietyLookupView.SortOrder.ToString()" Placeholder="Enter variety sort order..." />
            </Field>
            <Field>
                <FieldLabel>Add To Woo</FieldLabel>
                <Blazorise.Check TValue="bool" Checked="@(newItemAttributeVarietyLookupView.CanUpdateECommerceMap?? false)" CheckedChanged="((cv) => newItemAttributeVarietyLookupView.CanUpdateECommerceMap = cv)"></Blazorise.Check>
            </Field>
            <Field>
                <FieldLabel>Notes</FieldLabel>
                <TextEdit Text="@newItemAttributeVarietyLookupView.Notes" TextChanged="((nv) => newItemAttributeVarietyLookupView.Notes = nv)" Placeholder="Any notes..." />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@(() => HideModal(true))">
                <Tooltip Text="Save Changes">
                    <Icon Name="IconName.Save"></Icon>
                </Tooltip>
            </Button>
            <Button Color="Color.Secondary" Clicked="@(() => HideModal(false))">
                <Tooltip Text="Close">
                    <Icon Name="IconName.Undo"></Icon>
                </Tooltip>
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>


