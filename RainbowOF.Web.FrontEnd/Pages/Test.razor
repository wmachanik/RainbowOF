@page "/Test"
@using RainbowOF.Repositories.Common
@using RainbowOF.Models.Lookups
@using Microsoft.EntityFrameworkCore

<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Tests</CardTitle>
            </CardHeader>
            <CardBody>
                <Fields>
                    <Field>
                        <FieldLabel>
                            Categories: (loaded: @(ParentItemCategories == null ? 0 : ParentItemCategories.Count ))
                        </FieldLabel>
                        <FieldBody>
                            <DataGrid TItem="ItemCategoryLookup" Data="@ParentItemCategories"  
                                      Striped="true"
                                      Hoverable="true"
                                      Responsive="true"
                                      Bordered="true"
                                      @bind-SelectedRow="@seletectedItemCategory"
                                      DetailRowTrigger="@((item)=>((item.ItemCategoryLookupId == seletectedItemCategory?.ItemCategoryLookupId)))"
                                      Padding="Padding.Is0">
                                <EmptyTemplate>
                                    @if (ParentItemCategories == null)
                                    {
                                    <span>...</span>
                                    }
                                </EmptyTemplate>
                                <LoadingTemplate>
                                    <Row Style="display: inline-flex;" Padding="Padding.IsAuto">
                                        <Column>
                                            <span class="alert-info">Loading...</span>
                                        </Column>
                                    </Row>
                                </LoadingTemplate>
                                <DataGridColumns>
                                    <DataGridColumn TItem="ItemCategoryLookup" Field="@nameof(ItemCategoryLookup.CategoryName)" TextAlignment="TextAlignment.Center">
                                        <DisplayTemplate>
                                            Cat:
                                            <bold>@context.CategoryName</bold>
                                        </DisplayTemplate>
                                    </DataGridColumn>
                                    <DataGridColumn TItem="ItemCategoryLookup" Field="@nameof(ItemCategoryLookup.UsedForPrediction)" TextAlignment="TextAlignment.Center">
                                    </DataGridColumn>
                                    <DataGridColumn TItem="ItemCategoryLookup" Field="@nameof(ItemCategoryLookup.Notes)" TextAlignment="TextAlignment.Center">
                                    </DataGridColumn>
                                </DataGridColumns>
                                <DetailRowTemplate>
                                    @{
                                        var ParentId = (context as ItemCategoryLookup).ItemCategoryLookupId;

                                        var ChildData = GetChildItems(ParentId).Result;

                                        <DataGrid TItem="ItemCategoryLookup" Data="@ChildData"
                                                  Sortable="true" Editable="false"
                                                  Striped="true"
                                                  Hoverable="true"
                                                  Responsive="true"
                                                  EditMode="DataGridEditMode.Popup"
                                                  TotalItems="ChildData.Count"
                                                  Bordered="true"
                                                  UseInternalEditing="true"
                                                  Padding="Padding.Is0">
                                            <EmptyTemplate>
                                                @if (ChildData == null)
                                                {
                                                    <span>...</span>
                                                }
                                            </EmptyTemplate>
                                            <LoadingTemplate>
                                                <Row Style="display: inline-flex;" Padding="Padding.IsAuto">
                                                    <Column>
                                                        <span class="alert-info">Loading...</span>
                                                    </Column>
                                                </Row>
                                            </LoadingTemplate>
                                            <DataGridColumns>
                                                <DataGridColumn TItem="ItemCategoryLookup" Field="@nameof(ItemCategoryLookup.CategoryName)" TextAlignment="TextAlignment.Center" Context="ChildData">
                                                </DataGridColumn>
                                                <DataGridColumn TItem="ItemCategoryLookup" Field="@nameof(ItemCategoryLookup.UsedForPrediction)" TextAlignment="TextAlignment.Center" Context="ChildData">
                                                </DataGridColumn>
                                                <DataGridColumn TItem="ItemCategoryLookup" Field="@nameof(ItemCategoryLookup.Notes)" TextAlignment="TextAlignment.Center" Context="ChildData">
                                                </DataGridColumn>
                                            </DataGridColumns>
                                        </DataGrid>

                                    }
                                </DetailRowTemplate>
                            </DataGrid>
                        </FieldBody>
                    </Field>
                    <!--<Field>
                        <FieldLabel>
                            Selection mode
                        </FieldLabel>
                        <FieldBody>-->
                    @*<Select @bind-SelectedValue="@selectionMode">
                            <SelectItem Value="@DataGridSelectionMode.Single">Single</SelectItem>
                            <SelectItem Value="@DataGridSelectionMode.Multiple">Multiple</SelectItem>
                        </Select>*@
                    <!--</FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>
                            Custom Text
                        </FieldLabel>
                        <FieldBody>
                            <TextEdit @bind-Text="@customText" />
                        </FieldBody>
                    </Field>-->
                </Fields>
            </CardBody>
        </Card>
    </Column>
</Row>


@code
{
    bool editable = true;
    string customText = string.Empty;

    List<ItemCategoryLookup> ParentItemCategories;

    ItemCategoryLookup seletectedItemCategory;

    [Inject]
    IAppUnitOfWork _appUnitOfWork { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        var repo = _appUnitOfWork.itemCategoryLookupRepository();

        var _context = repo.GetAppDbContext();

        var _task = _context.ItemCategoriesLookup.Where(icl => icl.ParentCategoryId == null);

        ParentItemCategories = (await _task.ToListAsync());


//!!! why can we not call async? do we need to have a custom async call?
        await InvokeAsync(StateHasChanged);

        //var itemTable = repo.GetAppDbContext();

        ////var query = itemTable as IQueryable<Item>;

        //itemsList = await itemTable.Items
        //    .Include(itm => itm.ItemAttributes)
        //        .ThenInclude(itmAttr => itmAttr.ItemAttributeDetail)
        //    .Include(itm => itm.ItemAttributes)
        //                .ThenInclude(itmAtts => itmAtts.ItemAttributeVarieties)
        //                .ThenInclude(itmAttVars => itmAttVars.ItemAttributeVarietyLookupDetail)
        //    .ToListAsync();

        ////itemsList = (await repo.GetAllEagerAsync((itm => itm.ItemAttributes))).ToList();
    }

    async Task<List<ItemCategoryLookup>> GetChildItems(Guid soruceParentId)
    {
        List<ItemCategoryLookup> childenCategoryLookups = null;

        var repo = _appUnitOfWork.itemCategoryLookupRepository();

        childenCategoryLookups = (await repo.GetAllEagerAsync(icl => icl.ParentCategoryId.Equals(soruceParentId))).ToList();

        return childenCategoryLookups;
    }
}
