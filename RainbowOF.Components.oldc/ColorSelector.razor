@using Blazorise;
@using Blazorise.Utilities;
@using Blazorise.Extensions;


<style>
    .demo-theme-color-item {
        display: table-cell;
        width: 36px;
        height: 36px;
        vertical-align: top;
        text-align: center;
        color: white;
        cursor: pointer;
    }

        .demo-theme-color-item .material-icons {
            display: flex;
            height: 100%;
            align-items: center;
            justify-content: center;
        }

        .demo-theme-color-item.selected { /* border: 1px solid black; */
        }
</style>
<Blazorise.Modal></Blazorise.Modal>
<div>
    @foreach (var colour in ThemeColors.Items.Values)
    {
        <div>
            @foreach (var shade in colour.Shades.Values)
            {
                var colourValue = shade.Value;

                <div class="@(ClassNames(colourValue))" style="background: @colourValue" @onclick="(()=>OnClick(colourValue))"></div>
            }
        </div>
    }
</div>
@code{
    [Parameter]
    public string Value
    {
        get => _value;
        set
        {
            if (value == _value)
            {
                return;
            }
            _value = value;
            this.StateHasChanged();
            ValueChanged.InvokeAsync(value);
        }
    }

    string ClassNames(string value)
        => $"demo-theme-color-item{(value == Value ? " selected" : "")}";

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private string _value;

    Task OnClick(string value)
    {
        Value = value;

        return Task.CompletedTask;
    }
}